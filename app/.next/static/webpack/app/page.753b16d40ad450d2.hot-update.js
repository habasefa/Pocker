"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/gameUtils.ts":
/*!********************************!*\
  !*** ./src/utils/gameUtils.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIG_BLIND: () => (/* binding */ BIG_BLIND),\n/* harmony export */   community_cards: () => (/* binding */ community_cards),\n/* harmony export */   dealCards: () => (/* binding */ dealCards),\n/* harmony export */   gameStarter: () => (/* binding */ gameStarter),\n/* harmony export */   getNextPlayerIndex: () => (/* binding */ getNextPlayerIndex),\n/* harmony export */   next_actions: () => (/* binding */ next_actions),\n/* harmony export */   next_player: () => (/* binding */ next_player),\n/* harmony export */   should_continue_round: () => (/* binding */ should_continue_round),\n/* harmony export */   updateCards: () => (/* binding */ updateCards)\n/* harmony export */ });\nconst BIG_BLIND = 40;\nconst gameStarter = ()=>{\n    // 1. Position the players\n    const positions = [\n        1,\n        2,\n        3,\n        4,\n        5,\n        6\n    ];\n    // 2. Determine the dealer\n    const dealer = Math.floor(Math.random() * positions.length);\n    // 3. Initialize the small blind and big blind\n    const dsb = {\n        dealer: {\n            player: positions[dealer]\n        },\n        \"small blind\": {\n            player: positions[(dealer + 1) % positions.length],\n            amount: BIG_BLIND / 2\n        },\n        \"big blind\": {\n            player: positions[(dealer + 2) % positions.length],\n            amount: BIG_BLIND\n        }\n    };\n    // 5. Deal cards\n    const { dealtCards, remainingDeck } = dealCards(6, dealer);\n    return {\n        data: dealtCards,\n        dsb: dsb,\n        remainingDeck,\n        actions: {\n            preFlop: [],\n            flop: [],\n            turn: [],\n            river: []\n        }\n    };\n};\nconst community_cards = (round, deck)=>{\n    let cardsToDraw;\n    switch(round){\n        case \"flop\":\n            cardsToDraw = 3; // Draw 3 cards for the flop\n            break;\n        case \"turn\":\n        case \"river\":\n            cardsToDraw = 1; // Draw 1 card for turn and river\n            break;\n        default:\n            return {\n                cards: [],\n                remainingDeck: deck\n            }; // For preFlop or invalid rounds, return an empty set of cards\n    }\n    // Draw the specified number of cards from the deck\n    const drawnCards = deck.slice(0, cardsToDraw);\n    const remainingDeck = deck.slice(cardsToDraw);\n    return {\n        cards: drawnCards,\n        remainingDeck\n    };\n};\nconst updateCards = (state, round, playerIndex, action, amount)=>{\n    // Create a copy of the state to ensure immutability\n    const newState = {\n        ...state,\n        actions: {\n            ...state.actions\n        }\n    };\n    // Ensure the actions array for the specified round exists\n    if (!newState.actions[round]) {\n        newState.actions[round] = [];\n    }\n    // Add a new action entry to the round's actions array\n    newState.actions[round].push({\n        player: newState.data[playerIndex].player,\n        action,\n        ...amount !== undefined && {\n            amount\n        }\n    });\n    return newState;\n};\nconst next_actions = (actions, round, currentPlayerIndex)=>{\n    console.log(\"actions in next_actions\", actions);\n    // Extract actions taken in the specified round\n    const roundActions = actions[round] || [];\n    // Determine the highest bet made in the current round\n    const currentBet = Math.max(0, ...roundActions.filter((action)=>[\n            \"bet\",\n            \"raise\",\n            \"call\"\n        ].includes(action.action)).map((action)=>action.amount || 0));\n    // Calculate the total amount the current player has contributed in this round\n    const playerBet = roundActions.filter((action)=>action.playerIndex === currentPlayerIndex).reduce((sum, action)=>sum + (action.amount || 0), 0);\n    // Initialize possible actions for the player\n    const availableActions = [\n        \"fold\"\n    ];\n    // Determine available actions based on the current betting state\n    if (currentBet === 0) {\n        // No existing bet in the round: player can \"check\" or \"bet\"\n        availableActions.push(\"check\", \"bet\");\n    } else {\n        // There's an existing bet in the round\n        if (playerBet < currentBet) {\n            availableActions.push(\"call\"); // Player can call to match the current bet\n        }\n        if (playerBet === currentBet) {\n            availableActions.push(\"check\"); // Player can check if they’ve matched the bet\n        }\n        if (playerBet < currentBet) {\n            availableActions.push(\"raise\"); // Player can raise if they have chips to increase the current bet\n        }\n    }\n    // Add \"all-in\" as an option\n    availableActions.push(\"all-in\");\n    return availableActions;\n};\nconst should_continue_round = (actions, data, currentRound)=>{\n    // Get the list of actions for the current round\n    const roundActions = actions[currentRound];\n    // Check if every player in `data` has made an action in the current round\n    const allPlayersActed = data.every((player)=>roundActions.some((action)=>action.player === player.player));\n    // Calculate the total bet amount for each player in the current round\n    const playerBetTotals = {};\n    roundActions.forEach((action)=>{\n        if ([\n            \"bet\",\n            \"raise\",\n            \"call\"\n        ].includes(action.action) && action.amount !== undefined) {\n            playerBetTotals[action.player] = (playerBetTotals[action.player] || 0) + action.amount;\n        }\n    });\n    // Get all unique bet totals from players who acted in the round\n    const uniqueBetTotals = new Set(Object.values(playerBetTotals));\n    // All players must act, and their total bet amounts must be equal\n    return allPlayersActed && uniqueBetTotals.size === 1;\n};\nconst getNextPlayerIndex = (playerIndex, data, currentRound)=>{\n    const rounds = [\n        \"preFlop\",\n        \"flop\",\n        \"turn\",\n        \"river\"\n    ];\n    const currentRoundIndex = rounds.indexOf(currentRound);\n    // Step 1: Identify all players who have folded in any round up to the current round\n    const foldedPlayers = new Set();\n    for(let i = 0; i <= currentRoundIndex; i++){\n        const round = rounds[i];\n        if (data.actions[round]) {\n            data.actions[round].forEach((action)=>{\n                if (action.action === \"fold\") {\n                    foldedPlayers.add(action.player);\n                }\n            });\n        }\n    }\n    // Step 2: Filter out active players (who are not in foldedPlayers set)\n    const activePlayers = data.data.filter((player)=>!foldedPlayers.has(player.player));\n    // Step 3: Find the next active player after the current player\n    const currentPlayerId = data.data[playerIndex].player;\n    const currentIndexInActive = activePlayers.findIndex((player)=>player.player === currentPlayerId);\n    // Calculate the next player index in the active players list, wrapping around if necessary\n    const nextActiveIndex = (currentIndexInActive + 1) % activePlayers.length;\n    // Step 4: Map back to the original data index\n    return data.data.findIndex((player)=>player.player === activePlayers[nextActiveIndex].player);\n};\n// Helper function to generate dealt cards for each player\nconst dealCards = function() {\n    let players = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 6, dealer = arguments.length > 1 ? arguments[1] : void 0;\n    const suits = [\n        \"♠\",\n        \"♥\",\n        \"♦\",\n        \"♣\"\n    ];\n    const values = [\n        \"A\",\n        \"K\",\n        \"Q\",\n        \"J\",\n        \"10\",\n        \"9\",\n        \"8\",\n        \"7\",\n        \"6\",\n        \"5\",\n        \"4\",\n        \"3\",\n        \"2\"\n    ];\n    // Generate a full deck of cards\n    const deck = [];\n    for (const suit of suits){\n        for (const value of values){\n            deck.push(\"\".concat(value).concat(suit));\n        }\n    }\n    // Shuffle the deck\n    const shuffledDeck = deck.sort(()=>Math.random() - 0.5);\n    // Deal two cards to each player, starting from the player after the dealer\n    const dealtCards = [];\n    const startingPosition = (dealer + 1) % players;\n    for(let i = 0; i < players; i++){\n        const position = (startingPosition + i) % players;\n        const playerCards = [\n            shuffledDeck.pop(),\n            shuffledDeck.pop()\n        ]; // Deal two cards per player\n        const playerHand = playerCards.join(\" \"); // Format as \"Ac Kh\"\n        dealtCards.push({\n            player: position + 1,\n            dealt: playerHand\n        });\n    }\n    // After dealing cards, the remaining deck is what's left in shuffledDeck\n    const remainingDeck = [\n        ...shuffledDeck\n    ];\n    return {\n        dealtCards,\n        remainingDeck\n    };\n};\n// Helper function to tell the next player to act\nconst next_player = (state, currentPlayerIndex)=>{\n    const { dealtCards } = state; // Access the list of players from the state\n    const numPlayers = dealtCards.length;\n    // Find the highest bet made in the current stage\n    const highestBet = Math.max(...dealtCards.map((player)=>player.bet || 0) // Assuming `bet` property stores each player’s current bet amount\n    );\n    // Start from the next player and loop until finding an eligible player\n    let nextIndex = (currentPlayerIndex + 1) % numPlayers;\n    while(nextIndex !== currentPlayerIndex){\n        const player = dealtCards[nextIndex];\n        // Check if player has not folded and their bet is not equal to the highest bet\n        if (!player.folded && (player.bet || 0) < highestBet) {\n            return nextIndex; // Return the index of the next player to act\n        }\n        // Move to the next player\n        nextIndex = (nextIndex + 1) % numPlayers;\n    }\n    // If no eligible player found, return -1 to indicate the round is complete\n    return -1;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/gameUtils.ts\n"));

/***/ })

});